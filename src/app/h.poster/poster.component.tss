import { Component, ChangeDetectorRef, Input, AfterViewInit, OnInit, ViewChild, ElementRef, APP_ID, HostListener } from '@angular/core';
import { trigger, style, animate, transition } from '@angular/animations';
import { DclComponent } from '../_helper/dcl.component';
import { AuthGuard } from '../_helper/auth.guard';

import { HttpRequest } from '../_helper/http.request';
import { BusService } from '../_service/bus.service';
import { Router } from '@angular/router';
import { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';
import { PosterManager } from './poster.manager';
import { DialogMessage } from '../_service/dialog.message';
import { DialogComponent } from '../_helper/dialog.component';

import jsQR from "jsqr";

@Component({
  templateUrl: './poster.component.html',
  animations: [
    trigger(
      'enterAnimation', [
        transition(':enter', [
          style({/*transform: 'translateX(100%)',*/ opacity: 0 }),
          animate('200ms', style({ /*transform:'translateX(0)',*/ opacity: 1 }))
        ]),
        transition(':leave', [
          style({/*transform: 'translateX(0)',*/ opacity: 1 }),
          animate('200ms', style({/*transform: 'translateX(100%)',*/ opacity: 0 }))
        ])
      ]
    )
  ],
})

export class PosterComponent implements OnInit, AfterViewInit, DclComponent {

  posterManager: PosterManager
  constructor(protected hr: HttpRequest, private busService: BusService, private route: Router,public sanitizer: DomSanitizer) {
  }
  //show = [false,false];
  //photoes: any[] = ['assets/img/thumb01.jpg', 'assets/img/orig01.jpg']
  names = [];
  amounts = [];
  selected = 'mail';
  ngOnInit() {
  }
  ngAfterViewInit() {
    //this.photoes[0] = (JSON.parse(localStorage.getItem('0_svg')));
    
  }
  onEdit(i: number) {
    //this.busService.send(new DclWrapperMessage(this, 'HomeComponent', EditorComponent,i));
    this.route.navigate(['/editor'], { queryParams: { id: this.posterManager.getPosterNum(i), num: this.posterManager.num.length, cover:i==0 } });
  }
  onAppend(){
    this.posterManager.append();
    this.route.navigate(['/editor'], { queryParams: { id: this.posterManager.getPosterNum(this.posterManager.num.length-1), num: this.posterManager.num.length } });
  }
  onSelect() {
    if (this.selected = 'mail') {
      this.selected = 'ecard';
    } else {
      this.selected = 'mail';
    }
  }

  scan: boolean = false;
  prices = [];
  @ViewChild('preview') canvas:ElementRef; 
  video: any;
  webcamStream:any;
  startWebcam() {
    if(!this.video){
      this.video = document.createElement("video");
    }
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      navigator.mediaDevices.getUserMedia ({video: { facingMode: "environment",width: {exact: 500}, height: {exact: 500} }, audio: false })
      .then((localMediaStream) => {
        this.video.srcObject = localMediaStream;
        this.video.play();
        this.video.setAttribute("playsinline", true);
        this.webcamStream = localMediaStream;
        this.scan = true;
      }).catch((err) => {
        console.log("The following error occured: " + err);
      });
    } else {
      console.log("getUserMedia not supported");
    }
  }
  stopWebcam() {
    if(this.webcamStream) {
      //this.webcamStream.stop();
      this.video.pause();
      this.video.src = '';
      this.webcamStream.getTracks().forEach(track => {
        track.stop();
      });
      this.scan = false;
    }
  }
  drawLine(begin, end, color) {
    let ctx = this.canvas.nativeElement.getContext("2d");
    ctx.beginPath();
    ctx.moveTo(begin.x, begin.y);
    ctx.lineTo(end.x, end.y);
    ctx.lineWidth = 4;
    ctx.strokeStyle = color;
    ctx.stroke();
  }
  snapshot() {
    if(this.video && this.video.readyState === this.video.HAVE_ENOUGH_DATA) {
      this.canvas.nativeElement.height = this.video.videoHeight;
      this.canvas.nativeElement.width = this.video.videoWidth;
      this.canvas.nativeElement.getContext("2d").drawImage(this.video, 0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);
      var imageData = this.canvas.nativeElement.getContext("2d").getImageData(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);
      var code = jsQR(imageData.data, imageData.width, imageData.height, {
        inversionAttempts: "dontInvert",
      });
      if (code) {
        this.drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
        this.drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
        this.drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
        this.drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");
        this.prices.push(code.data);
      }
    }
  }
  onPriceAdd($event) {
    this.prices.push($event.value);
    console.log(this.prices);
  }
  onPriceRemove($event) {
    this.prices.splice(this.prices.indexOf($event.value),1);
    console.log(this.prices);
  }
  onAmountAdd($event) {
    this.amounts.push($event.value);
    console.log(this.amounts);
  }
  onAmountRemove($event) {
    this.amounts.splice(this.amounts.indexOf($event.value),1);
    console.log(this.amounts);
  }
  onNameAdd($event) {
    this.names.push($event.value);
    console.log(this.names);
  }
  onNameRemove($event) {
    this.names.splice(this.names.indexOf($event.value),1);
    console.log(this.names);
  }
  onConfirm(){
    let data = this.posterManager.getUploadData();
    data['names'] = this.names.join(',');
    data['prices'] = this.prices.join(',');
    data['amounts'] = this.amounts.join(',');
    this.hr.post('poster/upload',data, (result)=>{
      //var str = this.hr.mediaPathFromPosterId(result.data);
      this.busService.send(new DialogMessage(this, DialogComponent, {info:result.data.url,img:result.data.qr}));
    })
  }

  load(d: any = null) {
    this.posterManager = PosterManager.from(d.id,parseInt(d.num));
    this.hr.post('poster/down',{posterid:d.id, posternum:parseInt(d.num)}, (result)=>{
      if(!d.edited)this.posterManager.fromDownData(result.data);
      this.names = result.data.title ? result.data.title.split(','):[];
      this.prices = result.data.qr ? result.data.qr.split(','):[];
      this.amounts = result.data.price ? result.data.price.split(','):[];
    })
  }
}